1. info threads
  Id   Target Id         Frame
* 1    Thread <main>     process_execute (file_name=0xc0007d50 "do-nothing")
    at ../../userprog/process.c:57

pintos-debug: dumplist #0: 0xc000e000 {tid = 1, status = THREAD_RUNNING,
  name = "main", '\000' <repeats 11 times>, stack = 0xc000edbc "\335\322\002\300\n",
  priority = 31, allelem = {prev = 0xc003b19c <all_list>, next = 0xc0104020}, elem = {
    prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>},
  pcb = 0xc010500c, magic = 3446325067}
pintos-debug: dumplist #1: 0xc0104000 {tid = 2, status = THREAD_BLOCKED,
  name = "idle", '\000' <repeats 11 times>, stack = 0xc0104f14 "", priority = 0, allelem = {
    prev = 0xc000e020, next = 0xc003b1a4 <all_list+8>}, elem = {
    prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0x0,
  magic = 3446325067}

2. (gdb) bt
#0  process_execute (file_name=0xc0007d50 "do-nothing") at ../../userprog/process.c:57
#1  0xc0020a62 in run_task (argv=0xc003b08c <argv+12>) at ../../threads/init.c:315
#2  0xc0020ba4 in run_actions (argv=0xc003b08c <argv+12>) at ../../threads/init.c:388
#3  0xc0020421 in main () at ../../threads/init.c:136

3. info threads
  Id   Target Id         Frame
* 1    Thread <main>     start_process (file_name_=0xc010a000)
    at ../../userprog/process.c:75

pintos-debug: dumplist #0: 0xc000e000 {tid = 1, status = THREAD_BLOCKED,
  name = "main", '\000' <repeats 11 times>, stack = 0xc000ee7c "", priority = 31, allelem = {
    prev = 0xc003b19c <all_list>, next = 0xc0104020}, elem = {prev = 0xc003cbb8 <temporary+4>,
    next = 0xc003cbc0 <temporary+12>}, pcb = 0xc010500c, magic = 3446325067}
pintos-debug: dumplist #1: 0xc0104000 {tid = 2, status = THREAD_BLOCKED,
  name = "idle", '\000' <repeats 11 times>, stack = 0xc0104f14 "", priority = 0, allelem = {
    prev = 0xc000e020, next = 0xc010b020}, elem = {prev = 0xc003b18c <fifo_ready_list>,
    next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0x0, magic = 3446325067}
pintos-debug: dumplist #2: 0xc010b000 {tid = 3, status = THREAD_RUNNING,
  name = "do-nothing\000\000\000\000\000", stack = 0xc010bfd4 "", priority = 31, allelem = {
    prev = 0xc0104020, next = 0xc003b1a4 <all_list+8>}, elem = {
    prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0x0,
    magic = 3446325067}

4. (gdb) print/x if_
$2 = {edi = 0x0, esi = 0x0, ebp = 0x0, esp_dummy = 0x0, ebx = 0x0, edx = 0x0, ecx = 0x0,
  eax = 0x0, gs = 0x23, fs = 0x23, es = 0x23, ds = 0x23, vec_no = 0x0, error_code = 0x0,
  frame_pointer = 0x0, eip = 0x804890f, cs = 0x1b, eflags = 0x202, esp = 0xc0000000, ss = 0x23}

5. 
movl %0, %%esp 将栈指针 esp 设置为 if_ 的地址。
jmp intr_exit 跳转到 intr_exit 函数，在该函数中会根据 if_ 中保存的状态信息恢复中断的上下文并继续执行用户进程。

6. 
eax            0x0                 0
ecx            0x0                 0
edx            0x0                 0
ebx            0x0                 0
esp            0xc0000000          0xc0000000
ebp            0x0                 0x0
esi            0x0                 0
edi            0x0                 0
eip            0x804890f           0x804890f
eflags         0x202               [ IF ]
cs             0x1b                27
ss             0x23                35
ds             0x23                35
es             0x23                35
fs             0x23                35
gs             0x23                35

7.
(gdb) btpagefault 
#0  _start (argc=-268370093, argv=0xf000ff53) at ../../lib/user/entry.c:6
#1  0xf000ff53 in ?? ()
